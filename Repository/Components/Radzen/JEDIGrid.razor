@using Radzen
@using Radzen.Blazor
@using Repository.Models

@typeparam TEntity where TEntity : BaseEntity
@typeparam TDTO

<RadzenDataGrid Data="@Records"
    IsLoading="@_loading"
    EditMode="@EditMode"
    AllowColumnPicking="@AllowColumnPicking"
        AllowPickAllColumns="@AllowColumnPicking"
    AllowColumnReorder="@AllowColumnReorder"
    AllowColumnResize="@AllowColumnResize"
    AllowFiltering="@AllowFiltering"
    AllowSorting="@AllowSorting"
        AllowMultiColumnSorting="@AllowSorting"
    AllowGrouping="@AllowGrouping"
    AllowPaging="@AllowPaging"
    AllowVirtualization="@AllowVirtualization"
    AllowRowSelectOnRowClick="@AllowRowSelectOnClick">
    <Columns>
        @if(typeof(TDTO).IsValueType)
        {
        }
        else if (typeof(TDTO).IsClass)
        {
            @foreach (var property in typeof(TDTO).GetProperties())
            {
                <RadzenDataGridColumn Property="@property.Name"
                S>

                </RadzenDataGridColumn>
            }
        }
        else
        {
            throw new NotImplementedException($"{typeof(TDTO).Name} is not currently implemented.");
        }
    </Columns>
</RadzenDataGrid>

@code {
    [Parameter, EditorRequired] public string Id { get; set; } = string.Empty;

    [Parameter] public LookupRequest<TDTO, TEntity> LookupRequest { get; set; } = new();
    [Parameter] public Dictionary<string, ColumnOptions> ColumnOptionsMap { get; set; } = [];

    [Parameter] public DataGridEditMode EditMode { get; set; } = DataGridEditMode.Single;
    [Parameter] public bool AllowColumnPicking { get; set; } = true;
    [Parameter] public bool AllowColumnReorder { get; set; } = true;
    [Parameter] public bool AllowColumnResize { get; set; } = true;
    [Parameter] public bool AllowFiltering { get; set; } = true;
    [Parameter] public bool AllowSorting { get; set; } = true;
    [Parameter] public bool AllowGrouping { get; set; } = true;
    [Parameter] public bool AllowPaging { get; set; } = true;
    [Parameter] public bool AllowVirtualization { get; set; } = true;
    [Parameter] public bool AllowRowSelectOnClick { get; set; } = true;

    IQueryable<TDTO>? Records;
    bool _loading = true;
}